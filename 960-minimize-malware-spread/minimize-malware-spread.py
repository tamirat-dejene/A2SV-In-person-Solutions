class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n, gr = len(graph), defaultdict(list)
        for r in range(n):
            for c in range(n):
                if graph[r][c] == 1:
                    gr[r].append(c)
        
        initial, visited = set(initial), set()

        def dfs(node, cur_vis):
            affected = node in initial

            for ne in gr[node]:
                if ne not in visited:
                    visited.add(ne)
                    cur_vis.add(ne)

                    dfs(ne, cur_vis)

                    affected |= True if ne in initial else False
            
            return cur_vis, affected
        
        
        largest = 0
        nd = min(initial)

        for node in range(n):
            if node not in visited:
                visited.add(node)
                nodes, affected = dfs(node, set([node]))
                malware = nodes & initial
                

                if affected:
                    sz, mn = len(malware), min(malware)
                    if len(nodes) > largest:
                        largest = len(nodes) if sz == 1 else largest
                        nd = mn if sz == 1 else min(nd, mn)
                    elif len(nodes) == largest:
                        nd = min(nd, min(malware))
        
        return nd